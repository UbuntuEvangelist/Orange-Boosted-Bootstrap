//
// Basic Boosted table
//

.table {
  --#{$variable-prefix}table-bg: #{$table-bg};
  // Boosted mod: no table-accent-bg
  --#{$variable-prefix}table-striped-color: #{$table-striped-color};
  --#{$variable-prefix}table-striped-bg: #{$table-striped-bg};
  --#{$variable-prefix}table-active-color: #{$table-active-color};
  --#{$variable-prefix}table-active-bg: #{$table-active-bg};
  --#{$variable-prefix}table-hover-color: #{$table-hover-color};
  --#{$variable-prefix}table-hover-bg: #{$table-hover-bg};
  --#{$variable-prefix}table-border-color: #{$table-border-color}; // Boosted mod
  width: 100%;
  margin-bottom: $spacer;
  color: $table-color;
  vertical-align: $table-cell-vertical-align;

  // Boosted mod
  //// Only rows have border
  //// Set line-height everywhere
  tr {
    border-bottom: $table-border-width solid var(--#{$variable-prefix}table-border-color);
  }

  // Target th & td
  // We need the child combinator to prevent styles leaking to nested tables which doesn't have a `.table` class.
  // We use the universal selectors here to simplify the selector (else we would need 6 different selectors).
  // Another advantage is that this generates less code and makes the selector less specific making it easier to override.
  // stylelint-disable-next-line selector-max-universal
  > :not(caption) > * > * {
    padding: $table-cell-padding-y $table-cell-padding-x add($table-cell-padding-y, 1px); // Boosted mod
    line-height: $table-line-height; // Boosted mod
    background-color: var(--#{$variable-prefix}table-bg);
    box-shadow: inset 0 0 0 9999px var(--#{$variable-prefix}table-accent-bg);
  }

  > thead > tr {
    border-bottom-width: $table-border-width * 2;
  }

  > tbody > th {
    font-weight: $font-weight-normal;
  }
  // End mod

  > tbody {
    vertical-align: inherit;
  }
}


//
// Change placement of captions with a class
//

.caption-bottom {
  caption-side: bottom; // Boosted mod
}


//
// Condensed table w/ half padding
//

.table-sm {
  // stylelint-disable-next-line selector-max-universal
  > :not(caption) > * > * {
    padding: $table-cell-padding-y-sm $table-cell-padding-x-sm add($table-cell-padding-y-sm, 1px); // Boosted mod
  }
}

// Boosted mod: no .table-bordered

// Boosted mod: no .table-borderless

// Zebra-striping
//
// Default zebra-stripe styles (alternating gray and transparent backgrounds)

.table-striped {
  > tbody > tr:nth-of-type(#{$table-striped-order}) > * {
    --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-striped-bg);
    color: var(--#{$variable-prefix}table-striped-color);
  }
}

// Active table
//
// The `.table-active` class can be added to highlight rows or cells

.table-active {
  --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-active-bg);
  color: var(--#{$variable-prefix}table-active-color);
}

// Hover effect
//
// Placed here since it has to come after the potential zebra striping

.table-hover {
  > tbody > tr:hover > * {
    --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-hover-bg);
    color: var(--#{$variable-prefix}table-hover-color);
  }
}

.table-height-sm {
  max-height: 200px;
  overflow: auto;
}

.table-height-md {
  max-height: 400px;
  overflow: auto;
}

.table-height-lg {
  max-height: 600px;
  overflow: auto;
}

.table-sticky {
  > thead {
    > tr {
      position: sticky;
      top: 0;
      z-index: 2;
      border-width: 0;

      > th { // stylelint-disable-line
        $border-bottom-thead: calc(100% - ($table-border-width * 2)); // stylelint-disable-line function-disallowed-list
        background: linear-gradient(transparent 0%, transparent $border-bottom-thead, var(--#{$variable-prefix}table-border-color) $border-bottom-thead, var(--#{$variable-prefix}table-border-color) 100%);
        background-color: var(--#{$variable-prefix}table-bg);
      }
    }
  }
}

// Boosted mod: no table-row-variants

// Table variants set the table cell backgrounds, border colors
// and the colors of the striped, hovered & active tables

@each $color, $value in $table-variants {
  @include table-variant($color, $value);
}


// Responsive tables
//
// Generate series of `.table-responsive-*` classes for configuring the screen
// size of where your table will overflow.

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-down($breakpoint) {
    .table-responsive#{$infix} {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }
  }
}
